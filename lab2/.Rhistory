install.packages('readr')
install.packages("readr")
install.packages("tidyverse")
install.packages("readr")
install.packages("tidyverse")
series_from_imdb <- read_csv("~/Documentos/ad1/lab1-parte1/series_from_imdb.csv")
library(readr)
library(dplyr)
library(ggplot2)
series_from_imdb <- read_csv("~/Documentos/ad1/lab1-parte1/series_from_imdb.csv")
series_from_imdb_changed <- read_csv("~/Documents/ad1/lab1-parte1/series_from_imdb.csv")
minhas_series <- series_from_imdb %>% filter(series_name %in% c("Breaking Bad",
"House of Cards",
"Game of Thrones",
"Narcos"))
series_from_imdb <- read_csv("~/Documents/ad1/lab1-parte1/series_from_imdb.csv")
minhas_series <- series_from_imdb %>% filter(series_name %in% c("Breaking Bad",
"House of Cards",
"Game of Thrones",
"Narcos"))
series_from_imdb <- read_csv("~/Documents/ad1/lab1-parte1/series_from_imdb.csv")
minhas_series <- series_from_imdb %>% filter(series_name %in% c("Breaking Bad",
"House of Cards",
"Game of Thrones",
"Narcos"))
View(minhas_series)
minhas_series %>%
ggplot(aes(x = UserRating)) +
geom_histogram(binwidth = .5, fill = "white", color = "black") +
geom_rug()
minhas_series %>%
filter(series_name == "Game of Thrones")
minhas_series %>%
filter(series_name == "Game of Thrones")  %>%
ggplot(aes(x = UserRating)) +
geom_histogram(binwidth = .5, fill = "white", color = "black") +
geom_rug()
sd(minhas_series$UserRating)
got <- minhas_series %>%
filter(series_name == "Game of Thrones")
sd(got)
sd(got$UserRating)
sd(got$UserRating)
sd(bb$UserRating)
got <- minhas_series %>%
filter(series_name == "Game of Thrones")
bb <- minhas_series %>%
filter(series_name == "Breaking Bad")
hoc <- minhas_series %>%
filter(series_name == "House of Cards")
narcos <- minhas_series %>%
filter(series_name == "Narcos")
sd(got$UserRating)
sd(bb$UserRating)
sd(hoc$UserRating)
sd(narcos$UserRating)
sd(got$UserRating)
sd(bb$UserRating)
sd(hoc$UserRating)
sd(narcos$UserRating)
sd(got$UserRating)
sd(bb$UserRating)
sd(hoc$UserRating)
sd(narcos$UserRating)
summary(minhas_series)
summary(minhas_series)
sd(got$UserRating)
sd(bb$UserRating)
sd(hoc$UserRating)
sd(narcos$UserRating)
minhas_series %>%
filter(series_name == "Breaking Bad")
minhas_series %>%
filter(series_name == "Breaking Bad") +
ggplot(aes(x = UserRating)) +
geom_histogram(binwidth = .5, fill = "white", color = "black") +
geom_rug()
minhas_series %>%
ggplot(aes(x = UserRating)) +
geom_histogram(binwidth = .5, fill = "white", color = "black") +
geom_rug()
summary(minhas_series)
#library(tidyverse)
library(readr)
library(dplyr)
library(ggplot2)
series_from_imdb <- read_csv("~/Documents/ad1/lab1-parte1/series_from_imdb.csv")
#series_from_imdb <- read_csv("~/Documentos/ad1/lab1-parte1/series_from_imdb.csv")
minhas_series <- series_from_imdb %>% filter(series_name %in% c("Breaking Bad",
"House of Cards",
"Game of Thrones",
"Narcos"))
summary(minhas_series)
minhas_series %>%
ggplot(aes(x = as.character(series_name), y = UserRating)) +
geom_boxplot(outlier.color = NA) +
geom_jitter(width = .1, size = .5, alpha = .5, color = "red")
got <- minhas_series %>%
filter(series_name == "Game of Thrones")
bb <- minhas_series %>%
filter(series_name == "Breaking Bad")
hoc <- minhas_series %>%
filter(series_name == "House of Cards")
narcos <- minhas_series %>%
filter(series_name == "Narcos")
sd(got$UserRating)
sd(bb$UserRating)
sd(hoc$UserRating)
sd(narcos$UserRating)
#Game of Thrones: 0.4492807
#Breaking Bad:    0.498472
#House of Cards:  0.3907828
#Narcos:          0.253398
library(plotly)
install.packages(c("flexdashboard", "tidyverse", "plotly", "highcharter"))
library(plotly)
library(highcharter)
library(flexdashboard)
library(tidyverse)
library(plotly)
library(highcharter)
library(readr)
series_from_imdb <- read_csv("~/Documents/ad1/lab2/series_from_imdb.csv")
View(series_from_imdb)
series_imdb %>%
filter(series_name == "Dexter") %>%
plot_ly(x = ~ series_ep,
y = ~ UserRating,
name = "avaliacoes",
color = ~as.character(season),
text = ~Episode) %>%
add_trace(y = ~ UserRating,
type = "scatter",
mode = "lines+markers",
color = ~as.character(season),
line = list(width = 1),
hoverinfo = "text")
series_from_imdb %>%
filter(series_name == "Dexter") %>%
plot_ly(x = ~ series_ep,
y = ~ UserRating,
name = "avaliacoes",
color = ~as.character(season),
text = ~Episode) %>%
add_trace(y = ~ UserRating,
type = "scatter",
mode = "lines+markers",
color = ~as.character(season),
line = list(width = 1),
hoverinfo = "text")
series_from_imdb %>%
filter(series_name == "Dexter") %>%
plot_ly(x = ~ series_ep,
y = ~ UserRating,
name = "avaliacoes",
color = ~as.character(season),
text = ~Episode)
series_from_imdb %>%
filter(series_name == "Dexter") %>%
plot_ly(x = ~ series_ep,
y = ~ r1,
name = "avaliacoes",
color = ~as.character(season),
text = ~Episode) %>%
add_trace(y = ~ UserRating,
type = "scatter",
mode = "lines+markers",
color = ~as.character(season),
line = list(width = 1),
hoverinfo = "text")
series_from_imdb %>%
filter(series_name == "Dexter") %>%
plot_ly(x = ~ series_ep,
y = ~ r1,
name = "avaliacoes",
color = ~as.character(season),
text = ~Episode)
series_from_imdb %>%
filter(series_name == "Dexter") %>%
plot_ly(x = ~ series_ep,
y = ~ r10,
name = "avaliacoes",
color = ~as.character(season),
text = ~Episode)
series_from_imdb %>%
filter(series_name == "Dexter") %>%
p <- ggplot(aes(x = ~ series_ep, y = ~r1)) +
geom_point(aes(text = paste("Clarity:", clarity))) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
p + geom_line(data=d, aes(x = ~ series_ep, y = ~r1), color="red")
geom_line(data=d, aes(x = ~ series_ep, y = ~r1), color="red")
dexter <- series_from_imdb %>%
filter(series_name == "Dexter")
geom_line(data=d, aes(x = ~ series_ep, y = ~r1), color="red")
geom_line(data=dexter, aes(x = ~ series_ep, y = ~r1), color="red")
p1 <- plot_ly(dexter, x = ~r1) %>% add_histogram(name = "plotly.js")
p1
price_hist <- function(method = "FD") {
h <- hist(dexter$r1, breaks = method, plot = FALSE)
plot_ly(x = h$mids, y = h$counts) %>% add_bars(name = method)
}
price_hist
price_hist
price_hist
subplot(
p1, price_hist(), price_hist("Sturges"),  price_hist("Scott"),
nrows = 4, shareX = TRUE
)
p1 <- plot_ly(dexter, x = ~r1) %>% add_histogram(name = "plotly.js")
p2 <- plot_ly(dexter, x = ~r9) %>% add_histogram(name = "plotly.js")
p3 <- plot_ly(dexter, x = ~r10) %>% add_histogram(name = "plotly.js")
subplot(
p1, p2, p3,
nrows = 3, shareX = TRUE
)
series_from_imdb %>%
filter(series_name == "Dexter") %>%
plot_ly(x = ~ series_ep,
y = ~ r1,
name = "avaliacoes",
color = ~as.character(season),
text = ~Episode)
library(readr)
series_from_imdb <- read_csv("~/Documents/ad1/lab2/series_from_imdb.csv")
View(series_from_imdb)
library(tidyverse)
library(plotly)
library(readr)
library(dplyr)
series_from_imdb <- read_csv("~/Documents/ad1/lab2/series_from_imdb.csv")
library(tidyverse)
library(plotly)
library(readr)
library(dplyr)
series_from_imdb <- read_csv("~/Documents/ad1/lab2/series_from_imdb.csv")
library(tidyverse)
library(plotly)
library(readr)
library(dplyr)
series_from_imdb <- read_csv("~/Documents/ad1/lab2/series_from_imdb.csv")
p1 <- plot_ly(data = series_from_imdb %>%
filter(series_name == "Dexter"),
x = ~series_ep,
y = ~r1,
name = ~as.character(season),
type = "scatter") %>%
add_trace(y = ~ r1,
type = "scatter",
mode = "lines+markers",
color = ~as.character(season),
line = list(width = 1),
hoverinfo = "text",
text = ~paste('Prop:', r10,
'Ep:', Episode))
p2 <- plot_ly(data = series_from_imdb %>%
filter(series_name == "Dexter"),
x = ~series_ep,
y = ~r10,
name = ~as.character(season),
type = "scatter") %>%
add_trace(y = ~ r10,
type = "scatter",
mode = "lines+markers",
color = ~as.character(season),
line = list(width = 1),
hoverinfo = "text",
text = ~paste('Prop:', r10,
'Ep:', Episode))
subplot(
p1, p2,
nrows = 2, shareX = TRUE
)
install.packages("shiny")
library(shiny)
library(plotly)
library(readr)
library(ggthemes)
library(dplyr)
series_from_imdb <- read_csv("~/Documents/ad1/lab2/series_from_imdb.csv")
ui <- fluidPage(
radioButtons("name", "Plot Type:", choices = c("Dexter",
"Mr Robot",
"Sense8",
"Black Mirror",
"Breaking Bad",
"House of Cards",
"Stranger Things",
"Daredevil",
"Game of Thrones")),
plotlyOutput("plot"),
verbatimTextOutput("hover"),
verbatimTextOutput("click"),
verbatimTextOutput("brush"),
verbatimTextOutput("zoom")
)
server <- function(input, output, session) {
output$plot <- renderPlotly({
# use the key aesthetic/argument to help uniquely identify selected observations
dexter <- series_from_imdb %>%
filter(series_name == input$name)
key <- row.names(dexter)
p1 <- plot_ly(dexter, x = ~series_ep, y = ~r10, key = ~key, color = ~as.character(season),
mode =     "lines+markers" ) %>%
layout(dragmode = "select", title = "Proporcao que atribuiu nota max e min, respectivamente")
p2 <- plot_ly(dexter, x = ~series_ep, y = ~r1, key = ~key, color = ~as.character(season),
mode =     "lines+markers") %>%
layout(dragmode = "select")
p <- subplot(p1, p2, nrows = 2, margin = 0.04, heights = c(0.5, 0.5))
})
}
shinyApp(ui, server)
series_from_imdb <- read_csv("series_from_imdb.csv")
library(flexdashboard)
library(tidyverse)
library(plotly)
library(highcharter)
library(readr)
library(dplyr)
series_from_imdb <- read_csv("series_from_imdb.csv")
library(shiny)
library(plotly)
library(readr)
library(ggthemes)
library(dplyr)
series_from_imdb <- read_csv("~/Documents/ad1/lab2/series_from_imdb.csv")
ui <- fluidPage(
radioButtons("name", "Plot Type:", choices = c("Dexter",
"Mr Robot",
"Sense8",
"Black Mirror",
"Breaking Bad",
"House of Cards",
"Stranger Things",
"Daredevil",
"Game of Thrones")),
plotlyOutput("plot"),
verbatimTextOutput("hover"),
verbatimTextOutput("click"),
verbatimTextOutput("brush"),
verbatimTextOutput("zoom")
)
server <- function(input, output, session) {
output$plot <- renderPlotly({
# use the key aesthetic/argument to help uniquely identify selected observations
dexter <- series_from_imdb %>%
filter(series_name == input$name)
key <- row.names(dexter)
p1 <- plot_ly(dexter, x = ~series_ep, y = ~r10, key = ~key, color = ~as.character(season),
mode =     "lines+markers" ) %>%
layout(dragmode = "select", title = "Proporcao que atribuiu nota max e min, respectivamente")
p2 <- plot_ly(dexter, x = ~series_ep, y = ~r1, key = ~key, color = ~as.character(season),
mode =     "lines+markers") %>%
layout(dragmode = "select")
p <- subplot(p1, p2, nrows = 2, margin = 0.04, heights = c(0.5, 0.5))
})
}
shinyApp(ui, server)
library(shiny)
library(plotly)
library(readr)
library(ggthemes)
library(dplyr)
series_from_imdb <- read_csv("~/Documents/ad1/lab2/series_from_imdb.csv")
ui <- fluidPage(
radioButtons("name", "Plot Type:", choices = c("Dexter",
"Mr Robot",
"Sense8",
"Black Mirror",
"Breaking Bad",
"House of Cards",
"Stranger Things",
"Daredevil",
"Game of Thrones")),
plotlyOutput("plot"),
verbatimTextOutput("hover"),
verbatimTextOutput("click"),
verbatimTextOutput("brush"),
verbatimTextOutput("zoom")
)
server <- function(input, output, session) {
output$plot <- renderPlotly({
# use the key aesthetic/argument to help uniquely identify selected observations
dexter <- series_from_imdb %>%
filter(series_name == input$name)
key <- row.names(dexter)
p1 <- plot_ly(dexter, x = ~series_ep, y = ~r10, key = ~key, color = ~as.character(season),
mode =     "lines+markers" ) %>%
layout(dragmode = "select", title = "Proporcao que atribuiu nota max e min, respectivamente")
p2 <- plot_ly(dexter, x = ~series_ep, y = ~r1, key = ~key, color = ~as.character(season),
mode =     "lines+markers") %>%
layout(dragmode = "select")
p <- subplot(p1, p2, nrows = 2, margin = 0.04, heights = c(0.5, 0.5))
})
}
shinyApp(ui, server)
setwd("~/Documents/ad1/lab2")
series_from_imdb <- read_csv("series_from_imdb.csv")
library(shiny)
runGitHub("https://github.com/brunabarbosa/shinyApp", "brunabarbosa")
runGitHub("brunabarbosa/shinyApp", "brunabarbosa")
ui <- fluidPage(
radioButtons("name", "Plot Type:", choices = c("Dexter",
"Mr Robot",
"Sense8",
"Black Mirror",
"Breaking Bad",
"House of Cards",
"Stranger Things",
"Daredevil",
"Game of Thrones")),
plotlyOutput("plot"),
mainPanel(
h2("É comum o ultimo episodio de uma serie receber notas maximas? É comum o episodio piloto de uma serie receber uma maior quantidade de notas minimas? "),
br(),
p("Para isso vamos analisar a proporcao de notas minimas e maximas atribuidas a cada episodio pelos usuarios.
")
)
)
series_from_imdb <- read_csv("series_from_imdb.csv")
server <- function(input, output, session) {
output$plot <- renderPlotly({
# use the key aesthetic/argument to help uniquely identify selected observations
dexter <- series_from_imdb %>%
filter(series_name == input$name)
key <- row.names(dexter)
p1 <- plot_ly(dexter, x = ~series_ep, y = ~r10, key = ~key, color = ~as.character(season),
mode =     "lines+markers" ) %>%
layout(dragmode = "select", title = "Proporcao que atribuiu nota max e min, respectivamente")
p2 <- plot_ly(dexter, x = ~series_ep, y = ~r1, key = ~key, color = ~as.character(season),
mode =     "lines+markers") %>%
layout(dragmode = "select")
p <- subplot(p1, p2, nrows = 2, margin = 0.04, heights = c(0.5, 0.5))
})
}
shinyApp(ui, server)
ui <- fluidPage(
mainPanel(
h3("É comum o ultimo episodio de uma serie receber notas maximas? É comum o episodio piloto de uma serie receber uma maior quantidade de notas minimas? "),
br(),
p("Para isso vamos analisar a proporcao de notas minimas e maximas atribuidas a cada episodio pelos usuarios.
"),
radioButtons("name", "Plot Type:", choices = c("Dexter",
"Mr Robot",
"Sense8",
"Black Mirror",
"Breaking Bad",
"House of Cards",
"Stranger Things",
"Daredevil",
"Game of Thrones")),
plotlyOutput("plot"),
)
)
ui <- fluidPage(
mainPanel(
h3("É comum o ultimo episodio de uma serie receber notas maximas? É comum o episodio piloto de uma serie receber uma maior quantidade de notas minimas? "),
br(),
p("Para isso vamos analisar a proporcao de notas minimas e maximas atribuidas a cada episodio pelos usuarios.
"),
radioButtons("name", "Plot Type:", choices = c("Dexter",
"Mr Robot",
"Sense8",
"Black Mirror",
"Breaking Bad",
"House of Cards",
"Stranger Things",
"Daredevil",
"Game of Thrones")),
plotlyOutput("plot")
)
)
server <- function(input, output, session) {
output$plot <- renderPlotly({
# use the key aesthetic/argument to help uniquely identify selected observations
dexter <- series_from_imdb %>%
filter(series_name == input$name)
key <- row.names(dexter)
p1 <- plot_ly(dexter, x = ~series_ep, y = ~r10, key = ~key, color = ~as.character(season),
mode =     "lines+markers" ) %>%
layout(dragmode = "select", title = "Proporcao que atribuiu nota max e min, respectivamente")
p2 <- plot_ly(dexter, x = ~series_ep, y = ~r1, key = ~key, color = ~as.character(season),
mode =     "lines+markers") %>%
layout(dragmode = "select")
p <- subplot(p1, p2, nrows = 2, margin = 0.04, heights = c(0.5, 0.5))
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$plot <- renderPlotly({
# use the key aesthetic/argument to help uniquely identify selected observations
dexter <- series_from_imdb %>%
filter(series_name == input$name)
key <- row.names(dexter)
p1 <- plot_ly(dexter, x = ~series_ep, y = ~r10, key = ~key, color = ~as.character(season),
mode =     "lines+markers", type="scatter" ) %>%
layout(dragmode = "select", title = "Proporcao que atribuiu nota max e min, respectivamente")
p2 <- plot_ly(dexter, x = ~series_ep, y = ~r1, key = ~key, color = ~as.character(season),
mode =     "lines+markers", type="scatter" ) %>%
layout(dragmode = "select")
p <- subplot(p1, p2, nrows = 2, margin = 0.04, heights = c(0.5, 0.5))
})
}
shinyApp(ui, server)
runGitHub("brunabarbosa/shinyApp", "brunabarbosa")
